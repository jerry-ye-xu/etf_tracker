# Generated by Django 3.0.2 on 2020-01-12 07:54

from django.db import migrations

import logging
import time

from django.db import migrations

from fund_sma import fund
from logging_obj import LoggerObject

DATA_PATH = "../data"
SAVE_PATH = DATA_PATH # For clarity
FUND_CSV_PATH = f"{DATA_PATH}/tickers_to_track.csv"
FUNCTION = "SMA"
INTERVAL = "daily"
SERIES_TYPE = "close"
DAYS_TO_STORE = 120

SLEEP_TIME = 20

FORMAT = "%(asctime)s: %(name)s - %(levelname)s\n %(message)s"

LOGS = LoggerObject(name="logging_object", level=logging.DEBUG)
LOGS.add_handler(
    level=logging.ERROR,
    formatting=FORMAT,
    handler=logging.StreamHandler,
    name=None
)
LOGS.add_handler(
    level=logging.DEBUG,
    formatting=FORMAT,
    handler=logging.FileHandler,
    name="sma_fund.log"
)

def load_initial_funds(apps, schema_editor):
    Fund = apps.get_model("tracker", "Fund")
    FundPrices = apps.get_model("tracker", "FundPrices")

    with open(FUND_CSV_PATH, 'r') as f:
        num_tickers = f.readline()
        print(f"num_tickers: {num_tickers}")
        ALL_FUNDS = [None]*int(num_tickers)
        idx = 0
        for line in f:
            arr = [x.strip() for x in line.split(sep=",")]

            ticker: str = arr[0]
            ticker_full_name: str = arr[1]
            low_freq_period: int = int(arr[2])
            high_freq_period: int = int(arr[3])
            low_streak_alert: int = int(arr[4])
            high_streak_alert: int = int(arr[5])

            print(f"Loading {ticker} into class object")
            ALL_FUNDS[idx] = fund(ticker, LOGS)
            # print(aapl_fund.freq_low)

            result = ALL_FUNDS[idx].initial_build(
                FUNCTION,
                INTERVAL,
                SERIES_TYPE,
                DAYS_TO_STORE,
                low_freq_period,
                high_freq_period,
                low_streak_alert,
                high_streak_alert,
                SAVE_PATH
            )

            if not result:
                raise ValueError(f"{ALL_FUNDS[idx].ticker} has no stock information. Result returned {result}.")

            print(f"Saving {ticker} information to DB")
            curr = Fund.objects.get(ticker=ALL_FUNDS[idx].ticker)
            curr.ticker_full_name = ticker_full_name
            curr.latest_low_price = ALL_FUNDS[idx].freq_low[-1]
            curr.latest_high_price = ALL_FUNDS[idx].freq_high[-1]
            curr.save()

            print(f"Information saved for {curr.ticker}.")
            print(f"{curr.ticker}'s full name is {curr.ticker_full_name}.")


            # # Throw code into database
            # print(f"Creating Fund object for DB")
            # curr_fund = Fund(
            #     ticker = ALL_FUNDS[idx].ticker,
            #     ticker_full_name=ticker_full_name,
            #     function = ALL_FUNDS[idx].function,
            #     interval = ALL_FUNDS[idx].interval,
            #     days_to_store = ALL_FUNDS[idx].days_to_store,

            #     low_freq_period = ALL_FUNDS[idx].low_freq_period,
            #     high_freq_period = ALL_FUNDS[idx].high_freq_period,
            #     low_streak_alert = ALL_FUNDS[idx].low_streak_alert,
            #     high_streak_alert = ALL_FUNDS[idx].high_streak_alert,

            #     latest_low_price = ALL_FUNDS[idx].freq_low[-1],
            #     latest_high_price = ALL_FUNDS[idx].freq_high[-1],

            #     status = ALL_FUNDS[idx].status,
            #     status_duration = ALL_FUNDS[idx].status_duration,
            #     prev_status = ALL_FUNDS[idx].prev_status,
            #     holiday = ALL_FUNDS[idx].holiday
            # )

            # print(f"Saving {ticker} information to DB")
            # curr_fund.save(force_update=True)

            idx += 1
            print(f"Sleeping for {SLEEP_TIME}")
            time.sleep(SLEEP_TIME)

def reverse_initial_funds(apps, schema_editor):
    Fund = apps.get_model("tracker", "Fund")
    FundPrices = apps.get_model("tracker", "FundPrices")

    Fund.objects.all().delete()
    FundPrices.objects.all().delete()

class Migration(migrations.Migration):

    dependencies = [
        ('tracker', '0004_auto_20200112_0753'),
    ]

    operations = [
        migrations.RunPython(load_initial_funds, reverse_initial_funds)
    ]
